#! /usr/bin/python
import glob, re, sys, os
import xml.etree.cElementTree as ET

# configuration
var = {
    'releasever': '20',
    'basearch': 'x86_64',
}

def expand(s):
    s = re.split('\\$(\w+)', s)
    for i in range(1, len(s), 2):
        s[i] = var[s[i]]
    return ''.join(s)

def repos(path='/etc/yum.repos.d'):
    def enabled():
        if not n: return False
        return d.get('enabled') == '1'
    for fn in glob.glob(path +'/*.repo'):
        n = None
        for l in open(fn):
            m = re.search('^\[\s*(.+?)\s*\]', l)
            if m:
                if enabled(): yield n, d
                n, d = m.group(1), {}
                continue
            m = re.search('^\s*(\w+?)\s*=\s*(.+?)\s*$', l)
            if m: d[m.group(1)] = expand(m.group(2))
        if enabled(): yield n, d

# urlgrabber ;-)
import socket, hashlib
conn = {}

class Http:
    def __init__(self, url, csum=None, tee=None):
        m = re.search('^(\w+)://(.+)', url)
        if m:
            proto, url = m.groups()
        if proto == 'file':
            self.host = None
            self.cl = os.path.getsize(url)
            self.buf = ''
            self.recv = open(url, 'rb').read
        else:
            if proto not in ('http', 'https'):
                raise NotImplementedError
            self.host, url = re.search('(.+?)(/.+)', url).groups()
            get = 'GET %s HTTP/1.1\r\nHost: %s\r\nConnection: Keep-alive\r\n\r\n' % (url, self.host)
            self.sock = conn.pop(self.host, None)
            if self.sock:
                self.sock.sendall(get)
                self.buf = self.sock.recv(0x4000)
            if not self.sock or not self.buf:
                self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                self.sock.connect((self.host, 80))
                self.sock.sendall(get)
                self.buf = self.sock.recv(0x4000)
            self.recv = self.sock.recv
            while True:
                i = self.buf.find('\r\n\r\n')
                if i != -1: break
                more = self.recv(0x4000)
                if not more: raise IOError, 'No header'
                self.buf += more
            self.cl = int(re.search('\nContent-Length: (\d+)', self.buf).group(1))
            assert self.cl > 0, self.cl
            self.buf = self.buf[i + 4:]
            assert len(self.buf) <= self.cl, self.buf
        if csum:
            h, csum = csum
            if h == 'sha': h = 'sha1'
            csum = hashlib.new(h), csum
        self.csum = csum
        self.tee = tee

    def read(self, n=0x4000):
        if self.cl == 0:
            return ''
        buf = self.buf or self.recv(self.cl)
        buf, self.buf = buf[:n], buf[n:]
        if self.csum: self.csum[0].update(buf)
        if self.tee: self.tee(buf)
        self.cl -= len(buf)
        if self.cl == 0 and self.host:
            conn[self.host] = self.sock
            if self.csum:
                h, csum = self.csum
                if type(csum) is not list:
                    csum = [csum]
                if h.hexdigest() not in csum:
                    raise IOError, '%s: checksum failed' % self.host
        return buf

    def __iter__(self):
        l = ''
        while 1:
            buf = self.read()
            if not buf: break
            buf = (l + buf).split('\n')
            l = buf.pop()
            for i in buf: yield i
        if l: yield l

def retrieve(fn, base, csum):
    tee = open(fn +'.repomd', 'wb').write
    for ev, e in ET.iterparse(Http(base +'repodata/repomd.xml', csum, tee=tee)):
        if e.tag != '{http://linux.duke.edu/metadata/repo}data': continue
        if e.get('type') != 'primary': continue
        href = e.find('{http://linux.duke.edu/metadata/repo}location').get('href')
        csum = e.find('{http://linux.duke.edu/metadata/repo}checksum')
        csum = csum.get('type'), csum.text
    tee = os.popen('gzip -d >%s.xml' % fn, 'wb').write
    read = Http(base + href, csum, tee=tee).read
    while read(): pass

def sync(fn, d):
    csum = None
    try: base = d['baseurl'].split()
    except KeyError:
        url = d.get('metalink') or d.get('mirrorlist')
        tee = open(fn +'.metalink', 'wb').write
        base = Http(url, tee=tee)
        if '/metalink?' in url:
            csum = {}; best = None; out = []
            for ev, e in ET.iterparse(base):
                if e.tag == '{http://www.metalinker.org/}hash':
                    if e.get('type') in hashlib.algorithms:
                        best = e.get('type')
                        csum.setdefault(best, []).append(e.text)
                if e.tag == '{http://www.metalinker.org/}url':
                    out.append(e.text)
            csum = best, csum[best]
            base = out
    for base in base:
        if not base.startswith('http://') and \
           not base.startswith('file://'): continue
        if base.endswith('/repodata/repomd.xml'): base = base[:-19]
        elif not base.endswith('/'): base += '/'
        try: retrieve(fn, base, csum); return True
        except IOError, e: print e

class Pool(dict):
    def __call__(self, s, key=None):
        if type(s) is not str:
            assert type(s) is unicode, s
            s = s.encode('UTF-8')
        l = self.setdefault(s, [])
        if type(key) is int and key not in l:
            l.append(key)
        return s

    def list(self):
        ret = []
        for s in sorted(self):
            l = self[s]; self[s] = len(ret)
            if l:
                buf = strpool.buf()
                buf.dump(0, *tuple(l))
                buf.dump_raw(s)
                s = str(buf)
            ret.append(s)
        return ret

def evr(get):
    ret = get('ver') or ''
    e = get('epoch')
    if e and e != '0': ret = e +':'+ ret
    e = get('rel')
    if e: ret = ret +'-'+ e
    return ret

def parse(fn):
    arches = Pool()
    provides = Pool()
    versions = Pool()
    ctypes = Pool()
    packages = []
    for _, e in ET.iterparse(open(fn)):
        if e.tag != '{http://linux.duke.edu/metadata/common}package': continue
        name = e.find('{http://linux.duke.edu/metadata/common}name').text
        name = provides(name, len(packages))
        ver = evr(e.find('{http://linux.duke.edu/metadata/common}version').get)
        ver = versions(ver)
        arch = e.find('{http://linux.duke.edu/metadata/common}arch').text
        arch = arches(arch)
        size = int(e.find('{http://linux.duke.edu/metadata/common}size').get('package'))
        csum = e.find('{http://linux.duke.edu/metadata/common}checksum')
        ctype = ctypes(csum.get('type')); csum = csum.text
        loc = e.find('{http://linux.duke.edu/metadata/common}location').get('href')
        summ = e.find('{http://linux.duke.edu/metadata/common}summary').text or ''
        desc = e.find('{http://linux.duke.edu/metadata/common}description').text or ''
        if type(summ) is unicode: summ = summ.encode('utf-8')
        if type(desc) is unicode: desc = desc.encode('utf-8')
        prco = [(name, (2, ver))], [], [], [], []; tgt = None
        for v in e.find('{http://linux.duke.edu/metadata/common}format').getiterator():
            if v.tag == '{http://linux.duke.edu/metadata/common}file':
                v = provides(v.text, len(packages)), None
                if not v in prco[0]: prco[0].append(v)
            elif v.tag == '{http://linux.duke.edu/metadata/rpm}provides': tgt = 0
            elif v.tag == '{http://linux.duke.edu/metadata/rpm}requires': tgt = 1
            elif v.tag == '{http://linux.duke.edu/metadata/rpm}conflicts': tgt = 3
            elif v.tag == '{http://linux.duke.edu/metadata/rpm}obsoletes': tgt = 4
            elif v.tag == '{http://linux.duke.edu/metadata/rpm}entry':
                t = tgt; get = v.get
                if t == 1 and get('pre') == '1': t = 2
                f = get('flags')
                if f:
                    if   f == 'EQ': f = 2
                    elif f == 'LT': f = 1
                    elif f == 'GT': f = 4
                    elif f == 'LE': f = 3
                    elif f == 'GE': f = 6
                    else: raise ValueError, f
                    f = f, versions(evr(get))
                v = provides(get('name'), t == 0 and len(packages)), f
                if v not in prco[t]: prco[t].append(v)
        del prco[0][0]
        packages.append((name, ver, arch, size, ctype, csum, loc, summ, desc, prco))
        e.clear()
    return arches, provides, versions, ctypes, packages

import strpool

def dump(fn, (arches, provides, versions, ctypes, packages)):
    write = open(fn, 'wb').write
    # write header
    write('PKGS')
    for i in arches, provides, versions, ctypes:
        buf = strpool.buf()
        buf.dump_pool(i.list())
        write(buf)
    # write packages
    packages = [
        (provides[name], versions[ver], arches[arch], size, ctypes[ctype], csum, loc, summ, desc) +
        tuple([(provides[n], f and (f[0], versions[f[1]])) for n, f in ps] for ps in prco)
        for name, ver, arch, size, ctype, csum, loc, summ, desc, prco in packages]
    buf = strpool.buf()
    buf.dump_pool(packages)
    write(buf)

class Package:
    def __init__(self, chunk, repo):
        self.chunk = chunk
        self.repo = repo
        n, v, a, size, ct, csum, self.location, self.summary, self.description = chunk.load(0, 0, 0, 0, 0, '', '', '', '')
        self.name = repo.provides[n].load_cstr()
        self.evr = repo.versions[v]
        self.arch = repo.arches[a]
        self.size = size
        self.csum = repo.ctypes[ct], csum

    def __str__(self):
        return '%s-%s.%s' % (self.name, self.evr, self.arch)

class Repo:
    def __init__(self, name, fn):
        self.name = name
        self.mmap = strpool.mmap(open(fn))
        db = strpool.chunk(self.mmap)
        if db.load_raw(4) != 'PKGS':
            raise IOError, 'Repository signature not found'
        self.arches   = db.load_pool()
        self.provides = db.load_pool()
        self.versions = db.load_pool()
        self.ctypes   = db.load_pool()
        self.packages = db.load_pool()

    def __str__(self): return self.name
    def __len__(self): return len(self.packages)
    def __getitem__(self, pkgid):
        return Package(self.packages[pkgid], self)

    def search(self, patterns, provides):
        dup = set()
        for pat in patterns:
            if pat[-1:] == '*':
                pat = pat[:-1]
            else:
                pat += '\0'
            i = self.provides.find(pat)
            while i < len(self.provides):
                p = self.provides[i]
                if not p.startswith(pat): break
                if p.load_cstr():
                    while p:
                        pkgid = p.load(0)[0]
                        if pkgid in dup: continue
                        if provides or self.packages[pkgid].load(0)[0] == i:
                            yield pkgid; dup.add(pkgid)
                i += 1

class Sack(list):
    def load_rpmdb(self):
        from rpmlib import Rpmdb
        self.append(Rpmdb())

    def load_repos(self):
        for n, d in repos():
            fn = '%s-%s-%s' % (n, var['releasever'], var['basearch'])
            if not os.access(fn +'.db', os.R_OK):
                if not os.access(fn +'.xml', os.R_OK):
                    sync(fn, d)
                dump(fn +'.db', parse(fn +'.xml'))
            self.append(Repo(n, fn +'.db'))

    def search(self, patterns, provides):
        for repo in self:
            pkgids = repo.search(patterns, provides)
            yield repo, pkgids

if not os.isatty(sys.stdout.fileno()): color = lambda n: ''
else: color = lambda n: '\x1b[3%dm' % n

def main():
    if len(sys.argv) < 2:
        print 'nothing to do'
        return
    cmd, arg = sys.argv[1], sys.argv[2:]
    if cmd in ('search', 'info', 'provides'):
        opt = arg and arg[0]
        if opt in ('installed', 'available', 'all'): del arg[0]
        else: opt = 'all'

        sack = Sack()
        if opt in ('installed', 'all'): sack.load_rpmdb()
        if opt in ('available', 'all'): sack.load_repos()
        hdr_fmt = color(5)+'[%s, %d packages] '+color(0)
        fmt = ' '.join(color(i)+'%s' for i in (4, 1, 3, 0))
        for repo, pkgids in sack.search(arg or ['*'], cmd == 'provides'):
            hdr = True
            for pkgid in pkgids:
                if hdr: hdr = False; print hdr_fmt % (repo, len(repo))
                pkg = repo[pkgid]
                print fmt % (pkg.name, pkg.evr, pkg.arch, pkg.summary)
                if cmd == 'info':
                    if pkg.location:
                        print 'Checksum: %s%s%s (%s)' % (color(2), pkg.csum[1], color(0), pkg.csum[0])
                        print 'Location: %s%s%s (%s bytes)' % (color(2), pkg.location, color(0), pkg.size)
                    print pkg.description
                    print
    elif cmd == 'verify':
        sack = Sack()
        sack.load_rpmdb()
        from solv import Solver
        solv = Solver(sack)
        solv.verify()
    else:
        print 'bad command'

if __name__ == '__main__': main()
